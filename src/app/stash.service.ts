import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/throw'; // needed for the 'throw' operator to work

import { Stash } from './classes/stash';
import { ANGULAR2 } from './data/mockStash';
import { AppResponse } from './classes/response';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { SERVER } from './classes/SERVER';
import { AccountService } from './account.service';
import { Account } from './classes/account';

@Injectable()
export class StashService {

  constructor(private http: Http, private accountService: AccountService) {

  }



  /**
   * Create a stash based on the given parameters
   * the id will be generated by hashing the title
   * 
   * @param stash - the details of the stash (including id, title and description)
   */
  createStash(stash: Stash): Observable<AppResponse> {
    let options: RequestOptions;
    this.setupHeaderOptions(options);

    return this.http.post(
      SERVER + '/stash/new',
      {
        stash: stash
      },
      options
    ).map(response => {
      console.log(response);
      return new AppResponse(true, 'Stash created successfully.');
    }).catch(error => {
      console.log(error);
      return Observable.throw(error);
    });
  }

  /**
   * Delete a stash. The stashID must be present stash for it to be deleted.
   * 
   * @param stash - The stash to be deleted
   */
  deleteStash(stash: Stash): Observable<AppResponse> {
    if (stash.stash_id == null) {
      return Observable.throw('StashID must be present.');
    }

    let options: RequestOptions;
    this.setupHeaderOptions(options);

    console.log('deleting stash');

    return this.http.post(
      SERVER + '/stash/delete',
      {
        stash: stash
      }
    ).map(
      response => {
        return new AppResponse(true, 'Stash successfully deleted.');
      }
    ).catch(
      error => {
        return Observable.throw(error);
      }
    )
  }

  /**
   * 
   * @param title  the title of the stash
   */
  getStashInformation(title: string): Promise<Stash> {
    return Promise.resolve(ANGULAR2[0]);
  }

  /**
   * Retrieve all the stashes for a given user
   * 
   * @param userEmail - The email of the user whose stashes are to be retrieved
   */
  getAllStashes(): Observable<Stash[]> {
    let user:Account = this.accountService.getCurrentUser();

    let options: RequestOptions;
    this.setupHeaderOptions(options);

    return this.http.get(
      SERVER + '/stashes/all/' + user.email,
      options
    ).map(response => {
      // Attempt to convert the response to the array of stashes
      let stashes: Stash[] = response.json();
      console.log(stashes);

      return stashes;
    }).catch(error => {
      console.log(error);
      return Observable.throw(error);
    });
  }

  /**
   * 
   * @param stashID - The id of the stash to be retrieved
   */
  getStash(stashID: string): Observable<Stash> {
    let options: RequestOptions;
    this.setupHeaderOptions(options);

    return this.http.get(
      SERVER + '/stash/' + stashID,
      options
    ).map(response => {
      // Cast the response to a stash
      let stash = response.json();
      return stash;
    }).catch(error => {
      return Observable.throw(error);
    })
  }

  /**
   * HELPER METHODS
   */
  setupHeaderOptions(options: RequestOptions) {
    let headers = new Headers({
      'Content-Type': 'application/json'
    });
    options = new RequestOptions({ headers: headers });
  }
}
