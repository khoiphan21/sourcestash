import { Injectable } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Account } from './classes/account';
import { AppResponse } from './classes/response';
import { JOHN } from './data/mockAccount';

@Injectable()
/**
 * This service handles the following:
 *   1. Account creation
 *   2. Retrieving user information -> profile page
 *   3. Logging in
 */
export class AccountService {
  // Flag to check if the user is logged in
  private isLoggedIn: boolean;

  /**
   * First check in localstorage to see if there is user information stored 
   * If so, retrieve it and log the user in
   */
  constructor(
    private http: Http
  ) { }

  /**
   * Create an account based on the given parameters.
   * A user id is generated by hashing the email address
   * 
   * @param accountDetails the details of the account
   */
  createAccount(accountDetails: Account): Promise<AppResponse> {
    
    return Promise.resolve(null); // STUB METHOD
  }
  
  /**
   * Check the email address given to make sure it's not a registered email
   * 
   * @param email the email address to be checked
   */
  checkEmail(email: string): Promise<AppResponse> {

    return Promise.resolve(new AppResponse(true, 'All good'));
  }

  /**
   * Try to log a user in, and return the response from the server
   * 
   * Also store the user's login information in localstorage, to automatically 
   * log them in when they navigate to the page
   * 
   * @param email the email, and also the id, of the account
   * @param password self explanatory
   */
  login(email: string, password: string): Promise<AppResponse> {
    
    return Promise.resolve(new AppResponse(true, 'All good'));
  }
  
  /**
   * Check if the user is logged in
   */
  checkLoginStatus(): boolean {
    return this.isLoggedIn;
  }

  /**
   * Log the user out. Also clear localstorage to make sure user is not 
   * auto-logged in the next time they visit the site.
   */
  logout() {

  }
  
  /**
   * 
   * @param id - the id of the user, should be calculated from the email
   * @return a promise of the acocunt. The promise is rejected if the id doesn
   *         not exist
   */
  getUserInformation(id: string): Promise<Account> {
    /*
     * If id doesn't exist, will call Promise.reject('message')
     */

    
    return Promise.resolve(JOHN);
  }
  
  /**
   * Send request to server to edit the user's information, 
   * based on the given account details, and return server's response
   * 
   * @param id - the id of the user, just for double-checking
   * @param account - the object containing all information to be updated
   */
  editUserInformation(id: string, account: Account): Promise<AppResponse> {
    
    return Promise.resolve(new AppResponse(true, 'All good'));
  }

  /**
   * METHODS FOR TESTING
   */
  testGetUserInfo(id: string): Promise<Account> {
    let headers = new Headers({
      'Content-Type': 'application/json'
    });
    let options = new RequestOptions({ headers: headers });

    this.http.get(
      'http://localhost:8080/user',
      options
    ).subscribe(response => {
      console.log(response.json());
      return Promise.resolve(response);
    }, error => {
      console.log(error);
    })

    
    return Promise.resolve(null);
  }
}
